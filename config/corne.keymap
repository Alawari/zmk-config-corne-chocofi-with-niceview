/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    quick-tap-ms = <185>;
    tapping-term-ms = <185>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            quick-tap-ms = <200>;
        };

        holdtap: holdtap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <185>;
            flavor = "tap-preferred";
            quick-tap-ms = <185>;
        };

        weak: weak {
            compatible = "zmk,behavior-hold-tap";
            label = "WEAK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <230>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            quick-tap-ms = <230>;
        };

        backspace: backspace {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKSPACE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LC(BACKSPACE)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <16 19>;
        };

        under {
            bindings = <&kp UNDER>;
            key-positions = <28 31>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <4 7>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <13 22>;
        };
    };

    macros {
        save: save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp ESCAPE &kp COLON &kp W &kp ENTER>;

            label = "SAVE";
        };

        grave_sp: grave_sp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
            label = "GRAVE_SP";
        };

        tilde_sp: tilde_sp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp SPACE>;
            label = "TILDE_SP";
        };

        quote_sp: quote_sp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp SPACE>;
            label = "QUOTE_SP";
        };

        doublequote_sp: doublequote_sp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp SPACE>;
            label = "DOUBLEQUOTE_SP";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q                 &kp W                &kp E                    &kp R                  &kp T                   &kp Y                 &kp U              &kp I             &kp O                &kp P                    &none
&none  &holdtap LEFT_META A  &holdtap LEFT_ALT S  &holdtap LEFT_CONTROL D  &holdtap LEFT_SHIFT F  &holdtap RIGHT_ALT G    &holdtap RIGHT_ALT H  &holdtap RSHIFT J  &holdtap RCTRL K  &holdtap LEFT_ALT L  &holdtap RIGHT_GUI SEMI  &none
&none  &kp Z                 &kp X                &kp C                    &kp V                  &kp B                   &kp N                 &kp M              &kp COMMA         &kp DOT              &kp FSLH                 &none
                                                  &lt 1 ESCAPE             &lt 2 SPACE            &lt 3 TAB               &lt 4 RET             &lt 5 BACKSPACE    &lt 6 DELETE
            >;

            label = "home";
        };

        mouse {
            bindings = <
&trans  &trans    &trans    &trans     &trans          &trans    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans    &trans    &trans     &trans          &trans    &trans          &mkp MB4        &mkp MB5      &trans           &trans  &trans
                            &trans     &trans          &trans    &mkp LCLK       &mkp MCLK       &mkp RCLK
            >;
        };

        WM {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans                      &holdtap LA(LS(N7)) LA(N7)              &holdtap LA(LS(N8)) LA(N8)              &holdtap LA(LS(N9)) LA(N9)              &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans                      &holdtap LA(LS(NUMBER_4)) LA(NUMBER_4)  &holdtap LA(LS(N5)) LA(N5)              &holdtap LA(LS(NUMBER_6)) LA(NUMBER_6)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans                      &holdtap LA(LS(NUMBER_1)) LA(NUMBER_1)  &holdtap LA(LS(NUMBER_2)) LA(NUMBER_2)  &holdtap LA(LS(NUMBER_3)) LA(NUMBER_3)  &trans  &trans
                        &trans  &trans  &trans    &holdtap LA(LS(F1)) LA(F1)  &holdtap LA(LS(N0)) LA(N0)              &holdtap LA(LS(F2)) LA(F2)
            >;
        };

        nav {
            bindings = <
&trans  &none          &kp F7           &kp F8        &kp F9             &kp F12                   &kp LS(HOME)    &kp PAGE_DOWN  &kp PAGE_UP   &kp LS(END)  &none  &trans
&trans  &kp LEFT_META  &hm LEFT_ALT F4  &hm LCTRL F5  &hm LEFT_SHIFT F6  &holdtap RMETA LC(F11)    &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW  &kp RIGHT    &none  &trans
&trans  &none          &kp F1           &kp F2        &kp F3             &kp F10                   &none           &none          &none         &none        &none  &trans
                                        &none         &none              &trans                    &kp ENTER       &kp BACKSPACE  &kp DELETE
            >;

            label = "nav";
        };

        NUM {
            bindings = <
&trans  &kp LS(PIPE)  &kp N7  &kp N8   &kp N9  &kp LS(PRCNT)    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &grave_sp     &kp N4  &kp N5   &kp N6  &tilde_sp        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &none         &kp N1  &kp N2   &kp N3  &trans           &trans  &trans  &trans  &trans  &trans  &trans
                              &kp DOT  &kp N0  &kp COMMA        &trans  &trans  &trans
            >;
        };

        SYM {
            bindings = <
&trans  &kp CARET     &kp LS(STAR)   &kp MINUS                            &kp LS(PLUS)                                     &kp EQUAL                              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &quote_sp     &kp LS(POUND)  &kp LS(EXCL)                         &kp LS(QMARK)                                    &doublequote_sp                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(AMPS)  &kp LS(DLLR)   &kp LS(UNDER)                        &kp BSLH                                         &kp LS(AT)                             &trans  &trans  &trans  &trans  &trans  &trans
                                     &holdtap LS(RIGHT_BRACE) LEFT_BRACE  &holdtap LS(RIGHT_PARENTHESIS) LEFT_PARENTHESIS  &holdtap RIGHT_BRACKET LEFT_BRACKET    &trans  &trans  &trans
            >;
        };

        MEDIA {
            bindings = <
&trans  &trans             &trans        &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &ext_power EP_TOG  &kp K_PREV    &kp C_VOLUME_UP       &kp C_VOLUME_DOWN     &kp K_NEXT    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &out OUT_TOG       &bt BT_SEL 0  &bt BT_SEL 1          &bt BT_SEL 2          &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                         &kp K_STOP            &kp K_PLAY_PAUSE      &kp K_MUTE    &trans  &trans  &trans
            >;
        };
    };
};
